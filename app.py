import streamlit as st
import numpy as np
import pandas as pd
import pickle
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from pony.orm import *
from models import db
from datetime import date

st.set_page_config(page_title="Sentiment", page_icon="üé¨")

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–ª–∞—Å—Å–∞ Mystem() –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏–∏  —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

label_names = {1: 'pos', 0: 'neg'}

with open('data/pkl_object/vectorizer.pkl', 'rb') as f:
    vectorizer = pickle.load(f)
    
with open('data/pkl_object/logit.pkl', 'rb') as f:
    logit = pickle.load(f)
    
day = date.today()    
    
# —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É 'Sentiment'
@db_session
def add_sentiment(day, review):
    db.Sentiment_New(date=day, review=review)
    # commit() will be done automatically
    # database session cache will be cleared automatically
    # database connection will be returned to the pool    
         
@st.cache(allow_output_mutation=True)

# —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
def review_lower(review):
    
    return pd.Series(review.lower())

# —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
def ModelPredictProba(review, label_names, vectorizer, logit):
    
    # –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞–π–∑–µ—Ä–∞
    review = vectorizer.transform(review)
    label_pred = label_names[logit.predict_proba(review).argmax()]
    score = logit.predict_proba(review).max()
    
    return label_pred, score 
    
st.write(
    """
## üé¨ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–æ—Ç–∑—ã–≤–æ–≤) –∫ —Ñ–∏–ª—å–º–∞–º
"""
)

st.write('###')

st.write('**–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ—Ç–∑—ã–≤)**')

review_text = st.text_area(label='–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ—Ç–∑—ã–≤)', label_visibility="hidden")

if review_text:              
    st.success("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ—Ç–∑—ã–≤) –ø—Ä–∏–Ω—è—Ç", icon="‚úÖ")
    result = st.button('–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å')
    if result:
        review = review_lower(review_text)
        label_pred, score = ModelPredictProba(review, label_names, vectorizer, logit)
        add_sentiment(day, review_text)
        st.success("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ—Ç–∑—ã–≤) –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ", icon="‚úÖ")
        
        st.write(f"""**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
               
    ‚úîÔ∏è –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å:  {label_pred}
    
    ‚úîÔ∏è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:  {round(score, 2)}%
       
        """)

else:
    st.error("–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏", icon="‚ùå")
    
st.markdown("<h5 style='text-align: center; color: blac;'> ¬©Ô∏è Designed by Ruslan Latipov </h5>", unsafe_allow_html=True)